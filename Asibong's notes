{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Asibong01/Asibong/blob/main/Asibong's%20notes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qe1yoHRJGhZy"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import GridSearchCV, train_test_split\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import matplotlib.pyplot as plt\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "ub5QdotQHYCX",
        "outputId": "6d837b4a-1a73-41a4-91c0-6a2ae8c1d0c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "MessageError",
          "evalue": "Error: credential propagation was unsuccessful",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-d5df0069828e>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, readonly)\u001b[0m\n\u001b[1;32m     98\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m120000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreadonly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m   \u001b[0;34m\"\"\"Mount your Google Drive at the specified mountpoint path.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 100\u001b[0;31m   return _mount(\n\u001b[0m\u001b[1;32m    101\u001b[0m       \u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m       \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_remount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral, readonly)\u001b[0m\n\u001b[1;32m    131\u001b[0m   )\n\u001b[1;32m    132\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m     _message.blocking_request(\n\u001b[0m\u001b[1;32m    134\u001b[0m         \u001b[0;34m'request_auth'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'authType'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'dfs_ephemeral'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m     )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    174\u001b[0m       \u001b[0mrequest_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexpect_reply\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m   )\n\u001b[0;32m--> 176\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    101\u001b[0m     ):\n\u001b[1;32m    102\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mMessageError\u001b[0m: Error: credential propagation was unsuccessful"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/happiness_updated 3.csv\")"
      ],
      "metadata": {
        "id": "OM3XMkffHkHC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "CQzrL4uEIwgM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop('Country', axis=1)"
      ],
      "metadata": {
        "id": "2ED0x1JlKafw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "a0M7eD5WUCW9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#X = df.iloc[:, :8].values\n",
        "#Y = df.iloc[:, 8].values.reshape(-1,1)"
      ],
      "metadata": {
        "id": "DTf2w9zMKl_V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#print(np.shape(X))\n",
        "#print(np.shape(Y))"
      ],
      "metadata": {
        "id": "bYIXVSiZKra6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#df = pd.get_dummies(df, drop_first=True)"
      ],
      "metadata": {
        "id": "bfrVKi7iKwSF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(['Happiness_Score'], axis=1)\n",
        "y = df['Happiness_Score']"
      ],
      "metadata": {
        "id": "FqUdOg1eK26g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = df['Log_GDP_per_capita']\n",
        "y = df['Happiness_Score']"
      ],
      "metadata": {
        "id": "18E1wtMFpRfh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "neEYz4dtLEyQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "id": "qOMDQxVTqHxz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_model = RandomForestRegressor(random_state=42)\n",
        "rf_model.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "AMNP1pu5UOAV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = rf_model.predict(X_test)\n",
        "print('Test R2 score:', r2_score(y_test, y_pred))\n",
        "print('Test MSE score:', mean_squared_error(y_test, y_pred))"
      ],
      "metadata": {
        "id": "Ry-xL5m_USmu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "importances = pd.Series(rf_model.feature_importances_, index=X.columns)\n",
        "print(importances)\n",
        "importances.plot(kind='barh')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "4vvB5hGTUWTy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# RF Model\n",
        "rf_modelWithoob = RandomForestRegressor(random_state=42, oob_score=True)\n",
        "\n",
        "# RF model fit with OOB\n",
        "rf_modelWithoob.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate OOB score\n",
        "print('OOB R2 score:', rf_modelWithoob.oob_score_)\n",
        "print('OOB MSE score:', mean_squared_error(y_train, rf_modelWithoob.oob_prediction_))\n",
        "\n",
        "# Obtain feature importances and plot them\n",
        "importances = pd.Series(rf_modelWithoob.feature_importances_, index=X.columns)\n",
        "print(importances)\n",
        "importances.plot(kind='barh')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "8LQE7GFhUbJT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "param_grid = {\n",
        "    'n_estimators': [5, 10, 15, 20]\n",
        "    #,'max_depth': [None, 2, 5, 10], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4], 'max_features': ['auto', 'sqrt', 'log2']\n",
        "}"
      ],
      "metadata": {
        "id": "ffyKP-OaUiMA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scoring = {'R2': 'r2', 'MSE': 'neg_mean_squared_error'}\n",
        "print(scoring)\n",
        "\n"
      ],
      "metadata": {
        "id": "SpLsSAZ3Umaf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search = GridSearchCV(rf_model, param_grid=param_grid, cv=5, scoring=scoring, refit='R2')\n",
        "grid_search.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "_5Oipe6fUqTU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = grid_search.predict(X_test)\n",
        "print('Test R2 score:', r2_score(y_test, y_pred))\n",
        "print('Test MSE score:', mean_squared_error(y_test, y_pred))"
      ],
      "metadata": {
        "id": "S4UoLaM5Uuo4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('Best hyperparameters:', grid_search.best_params_)\n",
        "print('Best R2 score:', grid_search.best_score_)\n",
        "print('Best MSE score:', abs(grid_search.cv_results_['mean_test_MSE'][grid_search.best_index_]))"
      ],
      "metadata": {
        "id": "8CObMxW2UzIy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "importances = pd.Series(grid_search.best_estimator_.feature_importances_, index=X.columns)\n",
        "print(importances)\n",
        "importances.plot(kind='barh')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "RXEkb6urU2fF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import plot_tree\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(16, 8))\n",
        "plot_tree(grid_search.best_estimator_[0], ax=ax, feature_names=X_train.columns)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "ZokRyoeBU65e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform grid search with cross-validation\n",
        "grid_search = GridSearchCV(rf_modelWithoob, param_grid=param_grid, cv=5, scoring=scoring, refit='R2')\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate model on test set\n",
        "y_pred = grid_search.predict(X_test)\n",
        "print('Test R2 score:', r2_score(y_test, y_pred))\n",
        "print('Test MSE score:', mean_squared_error(y_test, y_pred))\n",
        "print('\\n')\n",
        "\n",
        "# Display best hyperparameters and corresponding R2 and MSE scores\n",
        "print('Best hyperparameters:', grid_search.best_params_)\n",
        "print('Best R2 score:', grid_search.best_score_)\n",
        "print('Best MSE score:', abs(grid_search.cv_results_['mean_test_MSE'][grid_search.best_index_]))\n",
        "print('\\n')\n",
        "\n",
        "# Display OOB score and related statistics\n",
        "print('OOB score:', grid_search.best_estimator_.oob_score_)\n",
        "oob_predictions = grid_search.best_estimator_.oob_prediction_\n",
        "print('OOB MSE score:', mean_squared_error(y_train, oob_predictions))\n",
        "print('OOB R2 score:', r2_score(y_train, oob_predictions))\n",
        "print('\\n')\n",
        "\n",
        "# Obtain feature importances and plot them\n",
        "importances_oob = pd.Series(grid_search.best_estimator_.feature_importances_, index=X.columns)\n",
        "print('Feature importances based on OOB:')\n",
        "print(importances_oob)\n",
        "importances_oob.plot(kind='barh')\n",
        "plt.show()\n",
        "\n",
        "# Display the decision tree\n",
        "from sklearn.tree import plot_tree\n",
        "fig, ax = plt.subplots(figsize=(16, 8))\n",
        "plot_tree(grid_search.best_estimator_[0], ax=ax, feature_names=X_train.columns)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "SVeO6n2mVISJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "import numpy as np\n",
        "\n",
        "# Perform random search with cross-validation; hence, create random search object\n",
        "random_search = RandomizedSearchCV(rf_model, param_distributions=param_grid, n_iter=20, cv=5, scoring=scoring, refit='R2')\n",
        "\n",
        "# fit the random search object to the train data\n",
        "random_search.fit(X_train, y_train)\n",
        "\n",
        "# Display best hyperparameters and corresponding R2 and MSE scores\n",
        "print('Best hyperparameters:', random_search.best_params_)\n",
        "print('Best R2 score:', random_search.best_score_)\n",
        "print('Best MSE score:', abs(random_search.cv_results_['mean_test_MSE'][random_search.best_index_]))\n",
        "print('\\n')\n",
        "\n",
        "# fit the model with the best parameters on the entire training set\n",
        "best_model = random_search.best_estimator_\n",
        "best_model.fit(X_train, y_train)\n",
        "\n",
        "# evaluate the best model on the test set\n",
        "y_pred = best_model.predict(X_test)\n",
        "print(\"Test R2 score:\", r2_score(y_test, y_pred))\n",
        "print(\"Test MSE score:\", mean_squared_error(y_test, y_pred))\n",
        "print('\\n')\n",
        "\n",
        "# Obtain feature importances and plot them\n",
        "importances = pd.Series(random_search.best_estimator_.feature_importances_, index=X.columns)\n",
        "print('Feature importances:')\n",
        "print(importances)\n",
        "importances.plot(kind='barh')\n",
        "plt.show()\n",
        "\n",
        "# Display the decision tree\n",
        "from sklearn.tree import plot_tree\n",
        "fig, ax = plt.subplots(figsize=(16, 8))\n",
        "plot_tree(random_search.best_estimator_[0], ax=ax, feature_names=X_train.columns)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "CEa2iPMQWL-G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "param_grid = {\n",
        "    'n_estimators': [5, 10, 15, 20],\n",
        "    'max_depth': [None, 2, 5, 10],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'max_features': ['auto', 'sqrt', 'log2']\n",
        "}"
      ],
      "metadata": {
        "id": "hpTUD9cLWjwe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import plot_tree\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(16, 8))\n",
        "plot_tree(grid_search.best_estimator_[0], ax=ax, feature_names=X_train.columns)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "rVHowWhRWyKA"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}